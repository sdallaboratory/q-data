{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    "Print to console": {
        "scope": "javascript,typescript",
        "prefix": "log",
        "body": [
            "console.log('$1');",
            ""
        ],
        "description": "Log output to console"
    },
    "Create public readonly property": {
        "scope": "typescript",
        "prefix": "pub",
        "body": [
            "public readonly $0",
        ],
    },
    "Create private readonly property": {
        "scope": "typescript",
        "prefix": "pr",
        "body": [
            "private readonly $0",
        ],
    },
    "Export interface": {
        "scope": "typescript",
        "prefix": "int",
        "body": [
            "export interface $0",
        ],
    },
    "Tap log in RxJS pipe": {
        "scope": "typescript",
        "prefix": "taplog",
        "body": [
            "tap(obj => console.log('TAP', obj)), // TODO: Remove log in pipe$0",
        ],
    },
    "Export type": {
        "scope": "typescript",
        "prefix": "type",
        "body": [
            "export type $0",
        ],
    },
    "Region starts": {
        "scope": "typescript",
        "prefix": "region",
        "body": [
            "// #region $0",
        ],
    },
    "Region ends": {
        "scope": "typescript",
        "prefix": "region-end",
        "body": [
            "// #endregion",
        ],
    },
    "Constructor": {
        "scope": "typescript",
        "prefix": "ctor",
        "body": [
            "public constructor(",
            "    $0",
            ") {}",
        ],
    },
    "Create BehaviorSubject property with get/set accessors": {
        "scope": "typescript",
        "prefix": "prop-full",
        "body": [
            "// #region ${1:property}",
            "",
            "private readonly _$1$ = new BehaviorSubject<${2:unknown}>($0);",
            "",
            "public readonly $1$ = this._$1$.asObservable();",
            "",
            "public get $1() {",
            "    return this._$1$.value;",
            "}",
            "",
            "public set $1(selectedGroupTreeNode: ${2:unknown}) {",
            "    this._$1$.next(selectedGroupTreeNode);",
            "}",
            "",
            "// #endregion",
        ],
    }
}
